// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Question {
  id          String      @id @default(cuid())
  code        String      @unique        // e.g., QUES-ABC123
  title       String
  description String
  createdAt   DateTime    @default(now())
  testCases   TestCase[]
  submissions Submission[]
  leaderboard LeaderboardEntry[]
}

model TestCase {
  id         String   @id @default(cuid())
  input      String
  expected   String
  isVisible  Boolean  @default(false)   // Hidden by default
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Team {
  id         String        @id @default(cuid())
  name       String        @unique           // Team name is used for login
  createdAt  DateTime      @default(now())
  submissions Submission[]
  leaderboard LeaderboardEntry[]
}

model Submission {
  id              String     @id @default(cuid())
  team            Team       @relation(fields: [teamId], references: [id])
  teamId          String
  question        Question   @relation(fields: [questionId], references: [id])
  questionId      String
  codeSubmitted   String     // Actual code string
  passedCount     Int        @default(0)
  failedCount     Int        @default(0)
  allPassed       Boolean    @default(false)
  createdAt       DateTime   @default(now())

  failedTestCases Json?
  revealedHidden  Boolean    @default(false)

  leaderboardEntries LeaderboardEntry[]
}


model LeaderboardEntry {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  rank         Int
  submittedAt  DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
