// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Question {
  id          String       @id @default(cuid())
  number      Int          @unique @default(autoincrement())
  code        String       @unique
  title       String
  description String
  difficulty  String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime     @default(now())
  
  winner      Int           @default(0) 
  runnerUp      Int           @default(0) 
  secondRunnerUp      Int           @default(0) 
  participant      Int           @default(0) 

  testCases   TestCase[]
  submissions  Submission[]
  leaderboard  LeaderboardEntry[]

  teams        Team[]       @relation("TeamQuestions")
}

model TestCase {
  id         String   @id @default(cuid())
  input      String
  expected   String
  isVisible  Boolean  @default(false)   // Hidden by default
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Team {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  points      Int           @default(0)

  submissions  Submission[]
  leaderboard  LeaderboardEntry[]

  questions    Question[]    @relation("TeamQuestions")
}

model Submission {
  id               Int      @id @default(autoincrement())
  submissionCode    String?     @unique

  team              Team       @relation(fields: [teamId], references: [id])
  teamId            String

  question          Question   @relation(fields: [questionId], references: [id])
  questionId        String

  createdAt         DateTime @default(now()) @updatedAt

  worksheet         Json       // Includes worksheetId, nodes, edges, etc.

  passedTestCases   Int        @default(0)
  totalTestCases    Int        @default(0)
  allPassed         Boolean    @default(false)

  failedTestCases   Json?      // Only failed test cases

  leaderboardEntries LeaderboardEntry[]

}


model LeaderboardEntry {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId Int

  submittedAt  DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
    @@unique([teamId, questionId])
}
