"use client"

import { useState, useEffect } from "react"
import { z } from "zod"
import {
  Card, CardHeader, CardTitle, CardContent,
} from "@/app/_components/ui/card"
import { Input } from "@/app/_components/ui/input"
import { Button } from "@/app/_components/ui/button"
import { Label } from "@/app/_components/ui/label"
import { Badge } from "@/app/_components/ui/badge"
import { Textarea } from "@/app/_components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Eye, EyeOff, Trash2, Plus } from "lucide-react"
import { toast } from "sonner"
import { nanoid } from "nanoid"
import { api } from "@/trpc/react"

const questionSchema = z.object({
  title: z.string().min(3),
  description: z.string().min(10),
  difficulty: z.enum(["Easy", "Medium", "Hard"]),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  testCases: z.array(
    z.object({
      input: z.string(),
      expected: z.string(),
      isVisible: z.boolean(),
    })
  ),
})

export default function QuestionPage() {
  

  return (
    
  )
}

_______________________________
const [questionData, setQuestionData] = useState({
    title: "",
    description: "",
    difficulty: "Easy",
    questionCode: "",
    startTime: "",
    endTime: "",
  })

  const [testCases, setTestCases] = useState([
    { id: nanoid(), input: "", expectedOutput: "", isVisible: true },
  ])

  const addTestCase = () => {
    setTestCases([
      ...testCases,
      { id: nanoid(), input: "", expectedOutput: "", isVisible: true },
    ])
  }

  const removeTestCase = (id: string) => {
    setTestCases(testCases.filter((tc) => tc.id !== id))
  }

  const updateTestCase = (id: string, key: string, value: any) => {
    setTestCases(
      testCases.map((tc) => (tc.id === id ? { ...tc, [key]: value } : tc))
    )
  }



  const { mutate: createQuestion, isPending } = api.question.create.useMutation({
    onSuccess: () => {
      toast.success("Question created successfully!")
      setQuestionData({
        title: "",
        description: "",
        difficulty: "Easy",
        questionCode: "",
        startTime: "",
        endTime: "",
      })
      setTestCases([{ id: nanoid(), input: "", expectedOutput: "", isVisible: true }])
    },
    onError: (err) => {
      toast.error(err.message || "Something went wrong.")
    },
  })

  const handleCreateQuestion = () => {
  

    createQuestion({
      title: questionData.title,
      description: questionData.description,
      difficulty: questionData.difficulty,
      startTime: questionData.startTime ? new Date(questionData.startTime) : undefined,
      endTime: questionData.endTime ? new Date(questionData.endTime) : undefined,
      testCases: testCases.map((tc) => ({
        input: tc.input,
        expected: tc.expectedOutput,
        isVisible: tc.isVisible,
      })),
    })
  }

  const visibleCount = testCases.filter((tc) => tc.isVisible).length
  const hiddenCount = testCases.length - visibleCount
  ___________________________________
   <Dialog>
      <DialogTrigger asChild>
         <Button
      size="sm"
      className="h-10 gap-1 bg-gradient-to-r from-teal-500 to-purple-500 text-white shadow transition-transform duration-200 hover:scale-[1.03] hover:shadow-md"
    >
          <PlusCircle className="h-3.5 w-3.5" />
          <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
            Create Question
          </span>
        </Button>
      </DialogTrigger>

      <DialogContent className="sm:max-w-[425px] bg-gradient-to-br from-white to-teal-50 dark:from-gray-900 dark:to-teal-900">
        <DialogHeader>
          <DialogTitle className="text-teal-700 dark:text-teal-300">
            Create New Question
          </DialogTitle>
          <DialogDescription>
            Fill in the details to Create a new Question.
          </DialogDescription>
        </DialogHeader>

       <div className="max-w-4xl mx-auto px-4 py-6 space-y-6">
      {/* Question Details */}
      <Card>
        <CardHeader>
          <CardTitle>Question Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="title">Question Title</Label>
              <Input
                id="title"
                value={questionData.title}
                onChange={(e) => setQuestionData({ ...questionData, title: e.target.value })}
                placeholder="Enter question title"
              />
            </div>
            <div>
              <Label htmlFor="difficulty">Difficulty</Label>
              <select
                id="difficulty"
                value={questionData.difficulty}
                onChange={(e) => setQuestionData({ ...questionData, difficulty: e.target.value })}
                className="w-full p-2 border rounded-md bg-background"
              >
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
              </select>
            </div>
          </div>

          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={questionData.description}
              onChange={(e) => setQuestionData({ ...questionData, description: e.target.value })}
              placeholder="Describe the problem and what participants need to achieve"
              rows={4}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                id="startTime"
                type="datetime-local"
                value={questionData.startTime}
                onChange={(e) => setQuestionData({ ...questionData, startTime: e.target.value })}
              />
            </div>
            <div>
              <Label htmlFor="endTime">End Time</Label>
              <Input
                id="endTime"
                type="datetime-local"
                value={questionData.endTime}
                onChange={(e) => setQuestionData({ ...questionData, endTime: e.target.value })}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Test Cases */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Test Cases</CardTitle>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                Define input/output pairs for testing solutions
              </p>
            </div>
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 text-sm">
                <Eye className="w-4 h-4 text-blue-500" />
                <span>{visibleCount} visible</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <EyeOff className="w-4 h-4 text-gray-500" />
                <span>{hiddenCount} hidden</span>
              </div>
              <Button onClick={addTestCase} size="sm">
                <Plus className="w-4 h-4 mr-2" />
                Add Test Case
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {testCases.map((testCase, index) => (
            <div key={testCase.id} className="border rounded-lg p-4 space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge variant="outline">Test Case {index + 1}</Badge>
                  <div className="flex items-center gap-2">
                    <Switch
                      checked={testCase.isVisible}
                      onCheckedChange={(checked) => updateTestCase(testCase.id, "isVisible", checked)}
                    />
                    <Label className="text-sm">
                      {testCase.isVisible ? (
                        <span className="flex items-center gap-1 text-blue-600">
                          <Eye className="w-3 h-3" />
                          Visible to users
                        </span>
                      ) : (
                        <span className="flex items-center gap-1 text-gray-500">
                          <EyeOff className="w-3 h-3" />
                          Hidden
                        </span>
                      )}
                    </Label>
                  </div>
                </div>
                {testCases.length > 1 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => removeTestCase(testCase.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                )}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Input</Label>
                  <Input
                    value={testCase.input}
                    onChange={(e) => updateTestCase(testCase.id, "input", e.target.value)}
                    placeholder="Enter input value"
                  />
                </div>
                <div>
                  <Label>Expected Output</Label>
                  <Input
                    value={testCase.expectedOutput}
                    onChange={(e) => updateTestCase(testCase.id, "expectedOutput", e.target.value)}
                    placeholder="Enter expected output"
                  />
                </div>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Create Button */}
      <div className="flex justify-end">
        <Button
          onClick={() => {
            handleCreateQuestion()
          }}
        >
          {isPending ? "Creating..." : "Create Question"}
        </Button>
      </div>
    </div>
      </DialogContent>
    </Dialog>